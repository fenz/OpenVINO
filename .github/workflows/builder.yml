name: singularity-deploy

on:
  push:
    branches:
      - "main"

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0
      - name: Get Latest Tag
        run: |
            # Get the latest tag, we won't build if it's the current
            git fetch --tags
            latest_tag=$(git tag | tail -1)
            echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Define Repository Name and Release Version
        run: |
            repo=$(echo "${GITHUB_REPOSITORY/\//-}")
            release=$(cat VERSION)
            echo "reponame=$repo" >> $GITHUB_ENV
            echo "release_tag=$release" >> $GITHUB_ENV

      - uses: eWaterCycle/setup-singularity@v6
        if: ${{ env.release_tag != env.latest_tag }}
        with:
          singularity-version: 3.7.1
      - name: Build the singularity container
        if: ${{ env.release_tag != env.latest_tag }}
        run: |
            repo=$(echo "${GITHUB_REPOSITORY/\//-}")

            start_commit="$latest_tag"
            if [ "$start_commit" == "" ]; then
              start_commit=$(git rev-list --max-parents=0 HEAD)
            fi

            recipes=$(git diff --diff-filter=AM --name-only $start_commit HEAD| { grep Singularity || [[ $? == 1 ]]; })

            # For each Singularity* container, build based on the prefix (tag) 
            for recipe in $recipes; do
                echo "Building $recipe"
                tag=$(echo "${recipe/*Singularity\./}")
                # If we find empty, use latest
                if [ "$tag" == "Singularity" ]; then
                    tag=latest
                fi
                # Build the container and name by tag
                echo "Tag is $tag."
                container="$repo:$tag.sif"
                singularity build --fakeroot container.sif "$recipe"
                if [ "$?" == "0" ]; then
                    echo "Successfully built container $container."                
                    mv container.sif "$container"
                else
                    echo "There was an issue building $container."          
                fi
            done
            images_built=$(find . -type f -name "*.sif")
            echo "images_built=$images_built" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ env.images_built != "" }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release_tag }}
          release_name: Release ${{ env.release_tag }}
          draft: false
          prerelease: false

